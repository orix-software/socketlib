{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>This lib is used to manage socket for Orix</p> <pre><code>.include \"socket.inc\"\n</code></pre>"},{"location":"assembly/","title":"Assembly","text":""},{"location":"assembly/#assembly","title":"Assembly","text":""},{"location":"assembly/#bind","title":"bind","text":"<p>Description</p> <p>Bind sockets</p> <p>Input</p> <ul> <li>X Register : Socket id</li> <li>Accumulator : Low byte of port</li> <li>Y Register : High byte of port</li> </ul> <p>Returns</p> <ul> <li> <p>Accumulator : XX </p> </li> <li> <p>X Register : XX </p> </li> <li> <p>Y Register : XX </p> </li> </ul> <p>socket := tmp1    buffer := ptr1    length := RESB    flags  := tmp2    ; Don't use flags    sta     flags ; Stored but not managed    ; Get length    jsr     popax    sta     length    stx     length + 1    ; get buf ptr    jsr     popax    sta     ptr1    stx     ptr1 + 1    jsr     popa ; Get socket id    sta     socket    SEND socket, buffer, length    rts endproc    protocol := tmp1    type     := tmp2    domain   := tmp3    ; Skip protocol    sta     protocol    jsr     popa    sta     RES+1 ; type    sta     type    jsr     popa ; domain    sta     domain    SOCKET domain, type, protocol    rts endproc</p>"},{"location":"c/","title":"C","text":""},{"location":"c/#c","title":"C","text":""},{"location":"c/#int-recvunsigned-char-s-void-buf-unsigned-int-len-unsigned-char-flags","title":"int recv(unsigned char s, void *buf, unsigned int len, unsigned char flags);","text":"<p>Description</p> <p>Does not handle flags</p> <p>Input</p> <p>Input</p> <p>Input</p>"},{"location":"c/#unsigned-int-sendunsigned-char-sockfd-const-void-buf-unsigned-int-len-unsigned-char-flags","title":"unsigned int send(unsigned char sockfd, const void buf[], unsigned int len, unsigned char flags);","text":"<p>Description</p> <p>Does not handle flags</p>"},{"location":"c/#int-sendtounsigned-char-sockfd-const-void-buf-size_t-len-unsigned-char-flags-const-struct-sockaddr-dest_addr-socklen_t-addrlen","title":"int sendto(unsigned char sockfd, const void buf, size_t len, unsigned char flags, const struct sockaddr dest_addr, socklen_t addrlen);","text":"<p>Description</p> <p>Open a socket</p>"},{"location":"c/#unsigned-char-socket-unsigned-char-domain-unsigned-char-__type-unsigned-char-protocol","title":"unsigned char socket (unsigned char domain, unsigned char __type, unsigned char protocol);","text":""},{"location":"2024.1/assembly/","title":"Assembly","text":""},{"location":"2024.1/assembly/#assembly","title":"Assembly","text":""},{"location":"2024.1/assembly/#bind","title":"bind","text":"<p>Input</p> <ul> <li>X Register : Socket id</li> <li>Accumulator : Low byte of port</li> <li>Y Register : High byte of port</li> </ul> <p>Returns</p> <ul> <li> <p>Accumulator : XX </p> </li> <li> <p>X Register : XX </p> </li> <li> <p>Y Register : XX </p> </li> </ul>"},{"location":"2024.1/assembly/#socket_close","title":"socket_close","text":"<p>Description</p> <p>Close socket</p> <p>Input</p> <ul> <li>X Register : The socket id</li> </ul>"},{"location":"2024.1/assembly/#socket_open_test","title":"socket_open_test","text":""},{"location":"2024.1/assembly/#socket_recv","title":"socket_recv","text":"<p>Description</p> <p>Get socket data</p> <p>Input</p> <ul> <li>X Register : Socket id</li> <li>Accumulator : Low ptr to store the buffer</li> <li>Y Register : High ptr to store the buffer</li> </ul>"},{"location":"2024.1/assembly/#socket","title":"socket","text":"<p>Description</p> <p>Open a socket</p> <p>Returns</p> <ul> <li> <p>X Register : The socket id</p> </li> <li> <p>Accumulator : if != -1 socket id</p> </li> </ul> <p>Example</p> <pre><code> ; or use Macro (socket.mac) SOCKET domain, type, protocol\n lda #$00\n ldx #AF_INET\n ldy #SOCK_STREAM\n jsr socket\n</code></pre>"},{"location":"2024.1/assembly/#socket_send","title":"socket_send","text":"<p>Description</p> <p>Send data into socket</p> <p>Input</p> <ul> <li>X Register : Socket id</li> <li>Accumulator : Low ptr of the buffer</li> <li>Y Register : High ptr of the buffer</li> </ul> <p>Returns</p> <ul> <li> <p>Accumulator : Low byte of the length</p> </li> <li> <p>X Register : High byte of the length</p> </li> <li> <p>Y Register : Error type</p> </li> </ul>"},{"location":"2024.1/c/","title":"C","text":""},{"location":"2024.1/c/#c","title":"C","text":"<p>const char str_debug_socket_recv[27] = \"[libsocket/socket_recv.s] \"; const char str_debug_socket_recv_waiting_buffer[25] = \"Waiting recv buffer ... \"; const char str_debug_socket_recv_received_buffer[30] = \"Received recv buffer bytes : \"; const char str_debug_socket_send[27] = \"[libsocket/socket_send.s] \"; const char str_debug_socket_send_waiting_send_buffer[38] = \"Waiting to have buffer send empty ...\";</p>"},{"location":"2024.2/assembly/","title":"Assembly","text":""},{"location":"2024.2/assembly/#assembly","title":"Assembly","text":""},{"location":"2024.2/assembly/#bind","title":"bind","text":"<p>Description</p> <p>Bind sockets</p> <p>Input</p> <ul> <li>X Register : Socket id</li> <li>Accumulator : Low byte of port</li> <li>Y Register : High byte of port</li> </ul> <p>Returns</p> <ul> <li> <p>Accumulator : XX </p> </li> <li> <p>X Register : XX </p> </li> <li> <p>Y Register : XX </p> </li> </ul>"},{"location":"2024.2/assembly/#connect","title":"connect","text":"<p>Description</p> <p>Perform connect to socket. Returns socket error if something is wrong</p> <p>Input</p> <ul> <li>Accumulator : Socket id</li> <li>Y Register : Low ip dest</li> <li>X Register : High ip dest</li> <li>RESB : dest port value (16 bits)</li> </ul> <p>Modify</p> <ul> <li>TR0Used to save socket</li> <li>REStmp</li> </ul> <p>Example</p> <pre><code> lda #00 ; Port 80\n sta RESB\n lda #80 ; Port\n sta RESB+1\n lda #$00 ; Socket id\n ldy #&lt;ip\n ldx #&gt;ip\n jsr connect\nip:\n .byte 192,168,1,77\n</code></pre>"},{"location":"2024.2/assembly/#recv","title":"recv","text":"<p>Description</p> <p>Get socket data</p> <p>Input</p> <ul> <li>Accumulator : Socket id</li> <li>X Register : Low ptr to store the buffer</li> <li>Y Register : High ptr to store the buffer</li> </ul> <p>Modify</p> <ul> <li>RES</li> </ul> <p>Returns</p> <ul> <li> <p>Accumulator : Error type</p> </li> <li> <p>X Register : Low length</p> </li> <li> <p>Y Register : High length</p> </li> </ul> <p>; Don't use flags    ; Get length    jsr     popax    sta     RES    stx     RES+1    ; get buf ptr    jsr     popax    sta     ptr1    stx     ptr1    jsr     popa ; Get socket id    ldy     ptr1    ldx     ptr1    ;;@brief Send data into socket    ;;@inputA Socket id    ;;@inputY Low ptr of the buffer    ;;@inputX High ptr of the buffer    ;;inputMEM_RES Size of the bufer to send    jmp     send endproc</p>"},{"location":"2024.2/assembly/#send","title":"send","text":"<p>Description</p> <p>Send data into socket</p> <p>Input</p> <ul> <li>Accumulator : Socket id</li> <li>Y Register : Low ptr of the buffer</li> <li>X Register : High ptr of the buffer</li> <li>RES : Size of the bufer to send</li> </ul> <p>Returns</p> <ul> <li>Accumulator : Error type</li> </ul> <p>Example</p> <pre><code>; Use SENDTO macro\n SENDTO current_socket, str_password, 11\n</code></pre>"},{"location":"2024.2/assembly/#socket_close","title":"socket_close","text":"<p>Description</p> <p>Close socket</p> <p>Input</p> <ul> <li>X Register : The socket id</li> </ul> <p>;;@<code>lda     #$00    ;;@</code> ldx     #AF_INET      ; domain    ;;@<code>ldy     #SOCK_STREAM  ; type    ;;@</code> jsr     socket    ; Skip protocol    jsr     popa    sta     RES+1 ; type    jsr     popa ; domain    tax    lda     #$00    ldy     RES+1    jsr     socket    ldx     #$00    rts endproc</p>"},{"location":"2024.2/assembly/#socket","title":"socket","text":"<p>Description</p> <p>Open a socket</p> <p>Input</p> <ul> <li>Accumulator : protocol </li> <li>X Register : domain </li> <li>Y Register : type </li> </ul> <p>Modify</p> <ul> <li>RES</li> </ul> <p>Returns</p> <ul> <li> <p>X Register : The socket id</p> </li> <li> <p>Accumulator : if != -1 then it returns socket id. -1 is return if all socket are used</p> </li> </ul> <p>Example</p> <pre><code> ; or use Macro (socket.mac) SOCKET domain, type, protocol\n SOCKET AF_INET, SOCK_STREAM, 0\n</code></pre> <p>Example</p> <pre><code> lda #$00\n ldx #AF_INET ; domain\n ldy #SOCK_STREAM ; type\n jsr socket\n</code></pre>"},{"location":"2024.2/c/","title":"C","text":""},{"location":"2024.2/c/#c","title":"C","text":"<p>Input</p> <p>Input</p> <p>Input</p> <p>Input</p>"},{"location":"2024.2/c/#int-recvunsigned-char-s-void-buf-unsigned-char-len-unsigned-char-flags","title":"int recv(unsigned char s, void *buf, unsigned char len, unsigned char flags);","text":"<p>Input</p> <p>Input</p> <p>Input</p> <p>const char str_debug_socket_recv[27] = \"[libsocket/socket_recv.s] \"; const char str_debug_socket_recv_waiting_buffer[25] = \"Waiting recv buffer ... \"; const char str_debug_socket_recv_received_buffer[30] = \"Received recv buffer bytes : \";</p>"},{"location":"2024.2/c/#unsigned-int-recvunsigned-char-s-void-buf-unsigned-int-len-unsigned-char-flags","title":"unsigned int recv(unsigned char s, void *buf, unsigned int len, unsigned char flags);","text":"<p>Description</p> <p>Send data into socket</p> <p>Input</p> <p>Input</p> <p>Input</p> <p>Description</p> <p>Open a socket</p>"},{"location":"2024.2/c/#unsigned-char-socket-unsigned-char-domain-unsigned-char-__type-unsigned-char-protocol","title":"unsigned char socket (unsigned char domain, unsigned char __type, unsigned char protocol);","text":""},{"location":"2025.1/assembly/","title":"Assembly","text":""},{"location":"2025.1/assembly/#assembly","title":"Assembly","text":""},{"location":"2025.1/assembly/#bind","title":"bind","text":"<p>Description</p> <p>Bind sockets</p> <p>Input</p> <ul> <li>X Register : Socket id</li> <li>Accumulator : Low byte of port</li> <li>Y Register : High byte of port</li> </ul> <p>Returns</p> <ul> <li> <p>Accumulator : XX </p> </li> <li> <p>X Register : XX </p> </li> <li> <p>Y Register : XX </p> </li> </ul> <p>socket := tmp1    buffer := ptr1    length := RESB    flags  := tmp2    ; Don't use flags    sta     flags ; Stored but not managed    ; Get length    jsr     popax    sta     length    stx     length + 1    ; get buf ptr    jsr     popax    sta     ptr1    stx     ptr1 + 1    jsr     popa ; Get socket id    sta     socket    SEND socket, buffer, length    rts endproc    protocol := tmp1    type     := tmp2    domain   := tmp3    ; Skip protocol    sta     protocol    jsr     popa    sta     RES+1 ; type    sta     type    jsr     popa ; domain    sta     domain    SOCKET domain, type, protocol    rts endproc</p>"},{"location":"2025.1/c/","title":"C","text":""},{"location":"2025.1/c/#c","title":"C","text":""},{"location":"2025.1/c/#int-recvunsigned-char-s-void-buf-unsigned-int-len-unsigned-char-flags","title":"int recv(unsigned char s, void *buf, unsigned int len, unsigned char flags);","text":"<p>Description</p> <p>Does not handle flags</p> <p>Input</p> <p>Input</p> <p>Input</p>"},{"location":"2025.1/c/#unsigned-int-sendunsigned-char-sockfd-const-void-buf-unsigned-int-len-unsigned-char-flags","title":"unsigned int send(unsigned char sockfd, const void buf[], unsigned int len, unsigned char flags);","text":"<p>Description</p> <p>Does not handle flags</p>"},{"location":"2025.1/c/#int-sendtounsigned-char-sockfd-const-void-buf-size_t-len-unsigned-char-flags-const-struct-sockaddr-dest_addr-socklen_t-addrlen","title":"int sendto(unsigned char sockfd, const void buf, size_t len, unsigned char flags, const struct sockaddr dest_addr, socklen_t addrlen);","text":"<p>Description</p> <p>Open a socket</p>"},{"location":"2025.1/c/#unsigned-char-socket-unsigned-char-domain-unsigned-char-__type-unsigned-char-protocol","title":"unsigned char socket (unsigned char domain, unsigned char __type, unsigned char protocol);","text":""},{"location":"2025.2/assembly/","title":"Assembly","text":""},{"location":"2025.2/assembly/#assembly","title":"Assembly","text":""},{"location":"2025.2/assembly/#bind","title":"bind","text":"<p>Description</p> <p>Bind sockets</p> <p>Input</p> <ul> <li>X Register : Socket id</li> <li>Accumulator : Low byte of port</li> <li>Y Register : High byte of port</li> </ul> <p>Returns</p> <ul> <li> <p>Accumulator : XX </p> </li> <li> <p>X Register : XX </p> </li> <li> <p>Y Register : XX </p> </li> </ul> <p>socket := tmp1    buffer := ptr1    length := RESB    flags  := tmp2    ; Don't use flags    sta     flags ; Stored but not managed    ; Get length    jsr     popax    sta     length    stx     length + 1    ; get buf ptr    jsr     popax    sta     ptr1    stx     ptr1 + 1    jsr     popa ; Get socket id    sta     socket    SEND socket, buffer, length    rts endproc    protocol := tmp1    type     := tmp2    domain   := tmp3    ; Skip protocol    sta     protocol    jsr     popa    sta     RES+1 ; type    sta     type    jsr     popa ; domain    sta     domain    SOCKET domain, type, protocol    rts endproc</p>"},{"location":"2025.2/c/","title":"C","text":""},{"location":"2025.2/c/#c","title":"C","text":""},{"location":"2025.2/c/#int-recvunsigned-char-s-void-buf-unsigned-int-len-unsigned-char-flags","title":"int recv(unsigned char s, void *buf, unsigned int len, unsigned char flags);","text":"<p>Description</p> <p>Does not handle flags</p> <p>Input</p> <p>Input</p> <p>Input</p>"},{"location":"2025.2/c/#unsigned-int-sendunsigned-char-sockfd-const-void-buf-unsigned-int-len-unsigned-char-flags","title":"unsigned int send(unsigned char sockfd, const void buf[], unsigned int len, unsigned char flags);","text":"<p>Description</p> <p>Does not handle flags</p>"},{"location":"2025.2/c/#int-sendtounsigned-char-sockfd-const-void-buf-size_t-len-unsigned-char-flags-const-struct-sockaddr-dest_addr-socklen_t-addrlen","title":"int sendto(unsigned char sockfd, const void buf, size_t len, unsigned char flags, const struct sockaddr dest_addr, socklen_t addrlen);","text":"<p>Description</p> <p>Open a socket</p>"},{"location":"2025.2/c/#unsigned-char-socket-unsigned-char-domain-unsigned-char-__type-unsigned-char-protocol","title":"unsigned char socket (unsigned char domain, unsigned char __type, unsigned char protocol);","text":""}]}