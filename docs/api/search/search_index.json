{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>This lib is used to manage socket for Orix</p>"},{"location":"assembly/","title":"Assembly","text":""},{"location":"assembly/#assembly","title":"Assembly","text":""},{"location":"assembly/#bind","title":"bind","text":"<p>Description</p> <p>Bind sockets</p> <p>Input</p> <ul> <li>X Register : Socket id</li> <li>Accumulator : Low byte of port</li> <li>Y Register : High byte of port</li> </ul> <p>Returns</p> <ul> <li> <p>Accumulator : XX </p> </li> <li> <p>X Register : XX </p> </li> <li> <p>Y Register : XX </p> </li> </ul>"},{"location":"assembly/#connect","title":"connect","text":"<p>Description</p> <p>Perform connect to socket</p> <p>Input</p> <ul> <li>Accumulator : Socket id</li> <li>Y Register : Low ip dest</li> <li>X Register : High ip dest</li> <li>RESB : Low/high dest port</li> </ul> <p>Modify</p> <ul> <li>TR0Used to save socket</li> <li>REStmp</li> </ul>"},{"location":"assembly/#recv","title":"recv","text":"<p>Description</p> <p>Get socket data</p> <p>Input</p> <ul> <li>Accumulator : Socket id</li> <li>X Register : Low ptr to store the buffer</li> <li>Y Register : High ptr to store the buffer</li> </ul> <p>Modify</p> <ul> <li>RES</li> </ul> <p>Returns</p> <ul> <li> <p>Accumulator : Error type</p> </li> <li> <p>X Register : Low length</p> </li> <li> <p>Y Register : High length</p> </li> </ul> <p>; Don't use flags    ; Get length    jsr     popax    sta     RES    stx     RES+1    ; get buf ptr    jsr     popax    sta     ptr1    stx     ptr1    jsr     popa ; Get socket id    ldy     ptr1    ldx     ptr1    ;;@brief Send data into socket    ;;@inputA Socket id    ;;@inputY Low ptr of the buffer    ;;@inputX High ptr of the buffer    ;;inputMEM_RES Size of the bufer to send    jmp     send endproc</p>"},{"location":"assembly/#send","title":"send","text":"<p>Description</p> <p>Send data into socket</p> <p>Input</p> <ul> <li>Accumulator : Socket id</li> <li>Y Register : Low ptr of the buffer</li> <li>X Register : High ptr of the buffer</li> </ul> <p>Returns</p> <ul> <li>Accumulator : Error type</li> </ul> <p>Example</p> <pre><code>; Use SENDTO macro\nSENDTO current_socket, str_password, 11\nrts\n\n\n## socket_close\n\n***Description***\n\nClose socket\n\n***Input***\n\n* X Register : The socket id\n\n\n;;@` lda     #$00\n;;@` ldx     #AF_INET      ; domain\n;;@` ldy     #SOCK_STREAM  ; type\n;;@` jsr     socket\n; Skip protocol\njsr     popa\nsta     RES+1 ; type\njsr     popa ; domain\ntax\nlda     #$00\nldy     RES+1\njsr     socket\nldx     #$00\nrts\nendproc\n## socket\n\n***Description***\n\nOpen a socket\n\n***Input***\n\n* Accumulator : protocol * X Register : domain * Y Register : type ***Modify***\n\n* RES\n\n***Returns***\n\n* X Register : The socket id\n\n* Accumulator : if != -1 then it returns socket id. -1 is return if all socket are used\n\n\n***Example***\n\n```ca65\n; or use Macro (socket.mac) SOCKET domain, type, protocol\nSOCKET AF_INET, SOCK_STREAM, 0\n</code></pre> <p>Example</p> <pre><code> lda #$00\nldx #AF_INET ; domain\nldy #SOCK_STREAM ; type\njsr socket\n</code></pre>"},{"location":"c/","title":"C","text":""},{"location":"c/#c","title":"C","text":"<p>Input</p> <p>Input</p> <p>Input</p> <p>Input</p>"},{"location":"c/#int-recvunsigned-char-s-void-buf-unsigned-char-len-unsigned-char-flags","title":"int recv(unsigned char s, void *buf, unsigned char len, unsigned char flags);","text":"<p>Input</p> <p>Input</p> <p>Input</p> <p>const char str_debug_socket_recv[27] = \"[libsocket/socket_recv.s] \"; const char str_debug_socket_recv_waiting_buffer[25] = \"Waiting recv buffer ... \"; const char str_debug_socket_recv_received_buffer[30] = \"Received recv buffer bytes : \";</p>"},{"location":"c/#unsigned-int-recvunsigned-char-s-void-buf-unsigned-int-len-unsigned-char-flags","title":"unsigned int recv(unsigned char s, void *buf, unsigned int len, unsigned char flags);","text":"<p>Description</p> <p>Send data into socket</p> <p>Input</p> <p>Input</p> <p>Input</p> <p>Description</p> <p>Open a socket</p>"},{"location":"c/#unsigned-char-socket-unsigned-char-domain-unsigned-char-__type-unsigned-char-protocol","title":"unsigned char socket (unsigned char domain, unsigned char __type, unsigned char protocol);","text":""},{"location":"2024.1/assembly/","title":"Assembly","text":""},{"location":"2024.1/assembly/#assembly","title":"Assembly","text":""},{"location":"2024.1/assembly/#bind","title":"bind","text":"<p>Input</p> <ul> <li>X Register : Socket id</li> <li>Accumulator : Low byte of port</li> <li>Y Register : High byte of port</li> </ul> <p>Returns</p> <ul> <li> <p>Accumulator : XX </p> </li> <li> <p>X Register : XX </p> </li> <li> <p>Y Register : XX </p> </li> </ul>"},{"location":"2024.1/assembly/#socket_close","title":"socket_close","text":"<p>Description</p> <p>Close socket</p> <p>Input</p> <ul> <li>X Register : The socket id</li> </ul>"},{"location":"2024.1/assembly/#socket_open_test","title":"socket_open_test","text":""},{"location":"2024.1/assembly/#socket_recv","title":"socket_recv","text":"<p>Description</p> <p>Get socket data</p> <p>Input</p> <ul> <li>X Register : Socket id</li> <li>Accumulator : Low ptr to store the buffer</li> <li>Y Register : High ptr to store the buffer</li> </ul>"},{"location":"2024.1/assembly/#socket","title":"socket","text":"<p>Description</p> <p>Open a socket</p> <p>Returns</p> <ul> <li> <p>X Register : The socket id</p> </li> <li> <p>Accumulator : if != -1 socket id</p> </li> </ul> <p>Example</p> <pre><code> ; or use Macro (socket.mac) SOCKET domain, type, protocol\nlda #$00\nldx #AF_INET\nldy #SOCK_STREAM\njsr socket\n</code></pre>"},{"location":"2024.1/assembly/#socket_send","title":"socket_send","text":"<p>Description</p> <p>Send data into socket</p> <p>Input</p> <ul> <li>X Register : Socket id</li> <li>Accumulator : Low ptr of the buffer</li> <li>Y Register : High ptr of the buffer</li> </ul> <p>Returns</p> <ul> <li> <p>Accumulator : Low byte of the length</p> </li> <li> <p>X Register : High byte of the length</p> </li> <li> <p>Y Register : Error type</p> </li> </ul>"},{"location":"2024.1/c/","title":"C","text":""},{"location":"2024.1/c/#c","title":"C","text":"<p>const char str_debug_socket_recv[27] = \"[libsocket/socket_recv.s] \"; const char str_debug_socket_recv_waiting_buffer[25] = \"Waiting recv buffer ... \"; const char str_debug_socket_recv_received_buffer[30] = \"Received recv buffer bytes : \"; const char str_debug_socket_send[27] = \"[libsocket/socket_send.s] \"; const char str_debug_socket_send_waiting_send_buffer[38] = \"Waiting to have buffer send empty ...\";</p>"}]}